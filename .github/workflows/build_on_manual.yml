name: build-release-only
on:
  push:
    tags:
      - 'v*.*.*' # 监听版本标签的推送，如 v1.0.0
  
env:
  BUILD_TYPE: Release  

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-2019]
        build_type: [RelWithDebInfo]
        ui: [gui]
        scripting: [lua]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          choco install wget -y --no-progress
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-x64.zip -d skia
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-x64.zip
          unzip Skia-macOS-Release-x64.zip -d skia
        else
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libstdc++.zip
          unzip Skia-Linux-Release-x64-libstdc++.zip -d skia
        fi
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export enable_ui=on
          export laf_backend=skia
        else
          export enable_ui=off
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        # if [[ "${{ runner.os }}" == "macOS" ]] ; then
        #  export skia_arch=arm64
        #else
        export skia_arch=x64
        #fi
        
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk \
          -DENABLE_UI=$enable_ui \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja aseprite
        
    - name: Generate Release Notes
      shell: bash
      run: |
        mkdir -p build/logs
        echo "## Release Notes" > build/logs/release-notes.md
        echo "### Changes" >> build/logs/release-notes.md
        # 从上一个 tag 获取提交记录，作为发布说明的一部分
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> build/logs/release-notes.md
        echo "" >> build/logs/release-notes.md
        echo "Generated on: $(date)" >> build/logs/release-notes.md
        
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}
        path: |
          build/bin
          build/logs

  package:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [macos-13, windows-2019]
        ui: [gui]
        scripting: [lua]
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}
          path: artifact

      - name: Package Release
        run: |
          PACKAGE_NAME="aseprite-${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}"
          mkdir -p $PACKAGE_NAME
          cp -r artifact/* $PACKAGE_NAME/
          zip -r $PACKAGE_NAME.zip $PACKAGE_NAME
  
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: aseprite-${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}.zip
          tag_name: ${{ github.ref_name }} # 使用推送的标签作为发布标签
          name: Release ${{ github.ref_name }} # 发布的名称
          body_path: artifact/logs/release-notes.md # 发布说明文件路径
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
